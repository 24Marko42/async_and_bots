# @test_method2_programming_bot
# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
import asyncio
import random
import json
from datetime import datetime
import aiohttp
from bs4 import BeautifulSoup

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties

from conf import token_tg  

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ 
bot = Bot(token=token_tg, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class EchoState(StatesGroup):
    active = State()

class TranslateStates(StatesGroup):
    choosing_lang = State()
    translating = State()

class QuizStates(StatesGroup):
    waiting_answer = State()

class GeocodeState(StatesGroup):
    active = State()

class PriceState(StatesGroup):
    active = State()

# –∫–ª–∞–≤–∞

def build_kb(*rows):
    builder = ReplyKeyboardBuilder()
    for row in rows:
        builder.row(*[KeyboardButton(text=text) for text in row])
    return builder.as_markup(resize_keyboard=True)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_kb = build_kb(
    ["üîÑ –≠—Ö–æ", "‚è∞ –í—Ä–µ–º—è", "üìÖ –î–∞—Ç–∞"],
    ["üé≤ –ò–≥—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫", "‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞"],
    ["üó∫Ô∏è –ì–µ–æ–∫–æ–¥–µ—Ä", "üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"],
    ["üí∞ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", "üèõÔ∏è –ú—É–∑–µ–π"]
)

game_menu_kb = build_kb(["üé≤ –ö—É–±–∏–∫–∏", "‚è±Ô∏è –¢–∞–π–º–µ—Ä"], ["üîô –ù–∞–∑–∞–¥"])
dice_menu_kb = build_kb(["1d6", "2d6"], ["1d20", "üîô –ù–∞–∑–∞–¥"])
timer_menu_kb = build_kb(["30 —Å–µ–∫", "1 –º–∏–Ω"], ["5 –º–∏–Ω", "üîô –ù–∞–∑–∞–¥"])

# –ö–æ–º–∞–Ω–¥–∞ /start –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb)

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def cmd_back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)

# –≠—Ö–æ-—Ñ—É–Ω–∫—Ü–∏—è
@dp.message(F.text == "üîÑ –≠—Ö–æ")
async def echo_prompt(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞:")
    await state.set_state(EchoState.active)

@dp.message(EchoState.active)
async def echo(message: types.Message, state: FSMContext):
    await message.answer(f"–Ø –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    await state.clear()

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã
@dp.message(F.text == "‚è∞ –í—Ä–µ–º—è")
async def show_time(message: types.Message):
    await message.answer(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now():%H:%M:%S}")

@dp.message(F.text == "üìÖ –î–∞—Ç–∞")
async def show_date(message: types.Message):
    await message.answer(f"–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: {datetime.now():%d.%m.%Y}")

# –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–≥—Ä–∞–º: –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
@dp.message(F.text == "üé≤ –ò–≥—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫")
async def game_helper(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=game_menu_kb)

@dp.message(F.text == "üé≤ –ö—É–±–∏–∫–∏")
async def choose_dice(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–±–∏–∫:", reply_markup=dice_menu_kb)

@dp.message(F.text.in_(["1d6", "2d6", "1d20"]))
async def roll_dice(message: types.Message):
    result = {
        "1d6": random.randint(1, 6),
        "2d6": f"{random.randint(1, 6)} –∏ {random.randint(1, 6)}",
        "1d20": random.randint(1, 20)
    }[message.text]
    await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

@dp.message(F.text == "‚è±Ô∏è –¢–∞–π–º–µ—Ä")
async def choose_timer(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞:", reply_markup=timer_menu_kb)

@dp.message(F.text.in_(["30 —Å–µ–∫", "1 –º–∏–Ω", "5 –º–∏–Ω"]))
async def set_timer(message: types.Message):
    seconds = {"30 —Å–µ–∫": 30, "1 –º–∏–Ω": 60, "5 –º–∏–Ω": 300}[message.text]
    await message.answer(f"–¢–∞–π–º–µ—Ä –Ω–∞ {message.text} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    await asyncio.sleep(seconds)
    await message.answer(f"‚è∞ {message.text} –∏—Å—Ç–µ–∫–ª–æ")

# –ú—É–∑–µ–π 
museum_rooms = {
    "–≤—Ö–æ–¥": ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°–¥–∞–π—Ç–µ –≤–µ—Ä—Ö–Ω—é—é –æ–¥–µ–∂–¥—É –≤ –≥–∞—Ä–¥–µ—Ä–æ–±.", ["–ó–∞–ª 1"]),
    "–ó–∞–ª 1": ("–ó–∞–ª –¥—Ä–µ–≤–Ω–µ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞.", ["–ó–∞–ª 2", "–≤—Ö–æ–¥", "–≤—ã—Ö–æ–¥"]),
    "–ó–∞–ª 2": ("–ó–∞–ª —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å—è.", ["–ó–∞–ª 3"]),
    "–ó–∞–ª 3": ("–ó–∞–ª –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.", ["–ó–∞–ª 4", "–ó–∞–ª 1"]),
    "–ó–∞–ª 4": ("–ó–∞–ª —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞.", ["–≤—ã—Ö–æ–¥", "–ó–∞–ª 1"]),
}

@dp.message(F.text == "üèõÔ∏è –ú—É–∑–µ–π")
async def start_museum(message: types.Message):
    await message.answer(museum_rooms["–≤—Ö–æ–¥"][0], reply_markup=build_kb(museum_rooms["–≤—Ö–æ–¥"][1]))

@dp.message(F.text.in_(museum_rooms))
async def museum_nav(message: types.Message):
    desc, options = museum_rooms[message.text]
    await message.answer(desc, reply_markup=build_kb(options))


# –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ (–∏–∑ —Ñ–∞–π–ª–∞ quiz.json) (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
@dp.message(F.text == "‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def start_quiz(message: types.Message, state: FSMContext):
    try:
        with open("quiz.json", encoding="utf-8") as f:
            data = list(json.load(f).items())
            random.shuffle(data)
            await state.update_data(questions=data[:10], score=0, index=0)
            await ask_question(message, state)
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")

async def ask_question(message, state):
    data = await state.get_data()
    if data["index"] < len(data["questions"]):
        q, _ = data["questions"][data["index"]]
        await message.answer(f"–í–æ–ø—Ä–æ—Å {data['index']+1}: {q}")
        await state.set_state(QuizStates.waiting_answer)
    else:
        await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {data['score']}/10", reply_markup=main_menu_kb)
        await state.clear()

@dp.message(QuizStates.waiting_answer)
async def check_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    _, correct = data["questions"][data["index"]]
    if message.text.strip().lower() == correct.strip().lower():
        data["score"] += 1
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –û—Ç–≤–µ—Ç: {correct}")
    data["index"] += 1
    await state.update_data(**data)
    await ask_question(message, state)

# –ì–µ–æ–∫–æ–¥–µ—Ä ("–≥–æ—Ä–æ–¥", "—É–ª–∏—Ü–∞" "–Ω–æ–º–µ—Ä")
@dp.message(F.text == "üó∫Ô∏è –ì–µ–æ–∫–æ–¥–µ—Ä")
async def geocoder_prompt(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    await state.set_state(GeocodeState.active)

@dp.message(GeocodeState.active)
async def geocoder(message: types.Message, state: FSMContext):
    query = message.text
    url = f"https://nominatim.openstreetmap.org/search?q={query}&format=json&limit=1"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()
                if not data:
                    await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    lat, lon = data[0]["lat"], data[0]["lon"]
                    map_url = f"https://static-maps.yandex.ru/1.x/?ll={lon},{lat}&size=450,450&z=15&l=map&pt={lon},{lat},pm2rdm"
                    await message.answer_photo(map_url, caption=f"üìç {query}\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    await state.clear()

# –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
@dp.message(F.text == "üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫")
async def translate_start(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=build_kb(["üá∑üá∫ ‚Üí üá¨üáß", "üá¨üáß ‚Üí üá∑üá∫"]))
    await state.set_state(TranslateStates.choosing_lang)

@dp.message(TranslateStates.choosing_lang)
async def choose_lang(message: types.Message, state: FSMContext):
    lang = "ru|en" if "üá∑üá∫" in message.text else "en|ru"
    await state.update_data(lang=lang)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")
    await state.set_state(TranslateStates.translating)

@dp.message(TranslateStates.translating)
async def do_translate(message: types.Message, state: FSMContext):
    data = await state.get_data()
    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://api.mymemory.translated.net/get?q={message.text}&langpair={data['lang']}") as resp:
            result = await resp.json()
            translated = result["responseData"]["translatedText"]
            await message.answer(f"–ü–µ—Ä–µ–≤–æ–¥: {translated}", reply_markup=main_menu_kb)
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
